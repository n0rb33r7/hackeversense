.class public final Ldagger/internal/codegen/AdapterJavadocs;
.super Ljava/lang/Object;
.source "AdapterJavadocs.java"


# static fields
.field static final ATTACH_METHOD:Ljava/lang/String; = "Used internally to link bindings/providers together at run time\naccording to their dependency graph.\n"

.field static final GENERATED_BY_DAGGER:Ljava/lang/String; = "Code generated by dagger-compiler.  Do not edit."

.field static final GET_DEPENDENCIES_METHOD:Ljava/lang/String; = "Used internally obtain dependency information, such as for cyclical\ngraph detection.\n"

.field static final GET_METHOD:Ljava/lang/String; = "Returns the fully provisioned instance satisfying the contract for\n{@code Provider<$T>}.\n"

.field static final MEMBERS_INJECT_METHOD:Ljava/lang/String; = "Injects any {@code @Inject} annotated fields in the given instance,\nsatisfying the contract for {@code Provider<$T>}.\n"

.field static final MODULE_TYPE:Ljava/lang/String; = "A manager of modules and provides adapters allowing for proper linking and\ninstance provision of types served by {@code @$T} methods.\n"

.field static final STATIC_INJECTION_TYPE:Ljava/lang/String; = "A manager for {@code $T}\'s injections into static fields.\n"

.field static final STATIC_INJECT_METHOD:Ljava/lang/String; = "Performs the injections of dependencies into static fields when requested by\nthe {@code $T}.\n"


# direct methods
.method public constructor <init>()V
    .locals 0

    .line 25
    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    return-void
.end method

.method static bindingTypeDocs(Lcom/squareup/javapoet/TypeName;ZZZ)Lcom/squareup/javapoet/CodeBlock;
    .locals 6

    .line 51
    invoke-static {}, Lcom/squareup/javapoet/CodeBlock;->builder()Lcom/squareup/javapoet/CodeBlock$Builder;

    move-result-object v0

    const/4 v1, 0x1

    new-array v2, v1, [Ljava/lang/Object;

    const/4 v3, 0x0

    aput-object p0, v2, v3

    const-string v4, "A {@code Binding<$T>} implementation which satisfies\n"

    invoke-virtual {v0, v4, v2}, Lcom/squareup/javapoet/CodeBlock$Builder;->add(Ljava/lang/String;[Ljava/lang/Object;)Lcom/squareup/javapoet/CodeBlock$Builder;

    move-result-object v0

    new-array v2, v3, [Ljava/lang/Object;

    const-string v4, "Dagger\'s infrastructure requirements including:\n"

    invoke-virtual {v0, v4, v2}, Lcom/squareup/javapoet/CodeBlock$Builder;->add(Ljava/lang/String;[Ljava/lang/Object;)Lcom/squareup/javapoet/CodeBlock$Builder;

    move-result-object v0

    const-string v2, "\n"

    if-eqz p3, :cond_0

    new-array p3, v3, [Ljava/lang/Object;

    .line 55
    invoke-virtual {v0, v2, p3}, Lcom/squareup/javapoet/CodeBlock$Builder;->add(Ljava/lang/String;[Ljava/lang/Object;)Lcom/squareup/javapoet/CodeBlock$Builder;

    move-result-object p3

    new-array v4, v1, [Ljava/lang/Object;

    aput-object p0, v4, v3

    const-string v5, "Owning the dependency links between {@code $T} and its\n"

    invoke-virtual {p3, v5, v4}, Lcom/squareup/javapoet/CodeBlock$Builder;->add(Ljava/lang/String;[Ljava/lang/Object;)Lcom/squareup/javapoet/CodeBlock$Builder;

    move-result-object p3

    new-array v4, v3, [Ljava/lang/Object;

    const-string v5, "dependencies.\n"

    invoke-virtual {p3, v5, v4}, Lcom/squareup/javapoet/CodeBlock$Builder;->add(Ljava/lang/String;[Ljava/lang/Object;)Lcom/squareup/javapoet/CodeBlock$Builder;

    :cond_0
    if-nez p1, :cond_1

    new-array p1, v3, [Ljava/lang/Object;

    .line 60
    invoke-virtual {v0, v2, p1}, Lcom/squareup/javapoet/CodeBlock$Builder;->add(Ljava/lang/String;[Ljava/lang/Object;)Lcom/squareup/javapoet/CodeBlock$Builder;

    move-result-object p1

    new-array p3, v1, [Ljava/lang/Object;

    aput-object p0, p3, v3

    const-string v4, "Being a {@code Provider<$T>} and handling creation and\n"

    invoke-virtual {p1, v4, p3}, Lcom/squareup/javapoet/CodeBlock$Builder;->add(Ljava/lang/String;[Ljava/lang/Object;)Lcom/squareup/javapoet/CodeBlock$Builder;

    move-result-object p1

    new-array p3, v3, [Ljava/lang/Object;

    const-string v4, "preparation of object instances.\n"

    invoke-virtual {p1, v4, p3}, Lcom/squareup/javapoet/CodeBlock$Builder;->add(Ljava/lang/String;[Ljava/lang/Object;)Lcom/squareup/javapoet/CodeBlock$Builder;

    :cond_1
    if-eqz p2, :cond_2

    new-array p1, v3, [Ljava/lang/Object;

    .line 65
    invoke-virtual {v0, v2, p1}, Lcom/squareup/javapoet/CodeBlock$Builder;->add(Ljava/lang/String;[Ljava/lang/Object;)Lcom/squareup/javapoet/CodeBlock$Builder;

    move-result-object p1

    new-array p2, v1, [Ljava/lang/Object;

    aput-object p0, p2, v3

    const-string p0, "Being a {@code MembersInjector<$T>} and handling injection\n"

    invoke-virtual {p1, p0, p2}, Lcom/squareup/javapoet/CodeBlock$Builder;->add(Ljava/lang/String;[Ljava/lang/Object;)Lcom/squareup/javapoet/CodeBlock$Builder;

    move-result-object p0

    new-array p1, v3, [Ljava/lang/Object;

    const-string p2, "of annotated fields.\n"

    invoke-virtual {p0, p2, p1}, Lcom/squareup/javapoet/CodeBlock$Builder;->add(Ljava/lang/String;[Ljava/lang/Object;)Lcom/squareup/javapoet/CodeBlock$Builder;

    .line 69
    :cond_2
    invoke-virtual {v0}, Lcom/squareup/javapoet/CodeBlock$Builder;->build()Lcom/squareup/javapoet/CodeBlock;

    move-result-object p0

    return-object p0
.end method
